# name of the workflow
name: Build and Deploy FastAPI Code

# specify when should the CI/CD be triggered
# triggered on push and pull requests in main branch only
# to trigger on all branches -> on : [push, pull_request]
on:
  push:
    branches:
      - "main"
    # - "next_branch" and so on..
  pull_request:
    branches:
      - "main"

# provide list of jobs to be done on the runner
jobs:

  # Provides all the commands for CI
  build: 

    # specify the environment (created in github environments)
    # environment:
    #   name: testing -> a sample name of the github environment

    
    # Provide all the environment variables
    # secrets.some_name -> the key value pairs are setup under secrets in github
    # the secrets don't get exposed to the world but is accessible only by the workflows
    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINS: ${{secrets.ACCESS_TOKEN_EXPIRE_MINS}}



    # Service container to run with build
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image for postgres
        image: postgres
        # Provide the name and password for postgres db
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
        # Provide the port number to run on
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    
    # specify the os
    runs-on: ubuntu-latest

    
    # specify the steps
    steps:
        # name -> human readable discription of the step
        # uses -> the github action to be performed

      # Download a copy of the code in the repository before running CI tests
      - name: Pulling git repo
        uses: actions/checkout@v2

      # Perform the installation of python3.9
      - name: Install python3.9
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      # Performs Updation of the pip version
      - name: Update pip
        run: python -m pip install --upgrade pip

      # Performs a clean installation of all dependencies in the `requirements.txt` file
      - name: Install all dependencies
        run: pip install -r requirements.txt

      # Performs installation of pytest module and
      # Runs all the tests for the code
      - name: Test with pytest
        run: |
          pip install pytest
          pytest 

      # Performs signing in to Docker Hub with the credentials provided in github secrets
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Performs setting-up Docker Buildx to create the builder 
      # instance using a BuildKit container under the hood
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:buildcache,mode=max
      
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  # Provides all the commands for CD
  deploy:

    # Specify the os
    runs-on: ubuntu-latest


    # Since all jobs are run parallely by default we need to specify what are the 
    # jobs need to be completed before beginning this job (in 'needs')

    # In this case, we need the 'build' job to be run first and then the 'deploy' job
    needs: [build]

    # Provide the steps
    steps:

      # Pull the code from github repo -> git pull
      - name: Pulling git repo
        uses: actions/checkout@v2

      # Performs the following steps in heroku:
      # 1. Install heroku CLI
      # 2. Login to heroku
      # 3. Add git remote for heroku
      # 4. Push the code to heroku -> git push heroku main
      - name: Deploying to heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
          heroku_email: ${{secrets.HEROKU_EMAIL}}

      # Performs the following steps in ubuntu:
      # 1. Login to ubuntu
      # 2. Go to the src directory -> cd app/src
      # 3. Pull the code from github repo -> git pull
      # 4. Restart the application -> systemctl restart api
      - name: Deploying to ubuntu server
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.PROD_HOST}}
          username: ${{secrets.PROD_USERNAME}}
          password: ${{secrets.PROD_PASSWORD}}
          script: |
            cd app/src
            git pull
            echo ${{secrets.PROD_PASSWORD}} | sudo -S systemctl restart api